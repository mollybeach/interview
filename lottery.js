let addressToTokenId = {
    "0xA": [1],
    "0xB": [2, 3],
    "0xD": [4, 5],
    "0xF": [6, 7],
    "0xH": [8, 9],
    "0xJ": [10, 11],
    "0xL": [12, 13],
    "0xN": [14, 15],
    "0xP": [16, 17],
    "0xR": [18, 19],
    "0xT": [20, 21],
    "0xV": [22, 23],
    "0xX": [24, 25],
    "0xZ": [26, 27],
    "0xAB": [28, 29],
    "0xAD": [30, 31],
    "0xAF": [32, 33],
    "0xAH": [34, 35],
    "0xAJ": [36, 37],
    "0xAL": [38, 39],
    "0xAN": [40, 41],
    "0xAP": [42, 43],
    "0xAR": [44, 45],
    "0xAT": [46, 47],
    "0xAV": [48, 49],
    "0xAX": [50, 51],
    "0xAZ": [52, 53],
    "0xABB": [54, 55],
    "0xABD": [56, 57],
    "0xABF": [58, 59],
    "0xABH": [60, 61],
    "0xABJ": [62, 63],
    "0xABL": [64, 65],
    "0xABN": [66, 67],
    "0xABP": [68, 69],
    "0xABR": [70, 71],
    "0xABT": [72, 73],
    "0xABV": [74, 75],
    "0xABX": [76, 77],
    "0xABZ": [78, 79],
    "0xABCB": [80, 81],
    "0xABCD": [82, 83],
    "0xABCF": [84, 85],
    "0xABCH": [86, 87],
    "0xABCJ": [88, 89],
    "0xABCL": [90, 91],
    "0xABCN": [92, 93],
    "0xABCP": [94, 95],
    "0xABCR": [96, 97],
    "0xABCT": [98, 99],
    "0xABCV": [100],
    "0xABCX": [101, 102],
    "0xABCZ": [103, 104],
    "0xABDB": [105, 106],
    "0xABDD": [107, 108],
    "0xABDF": [109, 110],
    "0xABDH": [111, 112],
    "0xABDJ": [113, 114],
    "0xABDL": [115, 116],
    "0xABDN": [117, 118],
    "0xABDP": [119, 120],
    "0xABDR": [121, 122],
    "0xABDT": [123, 124],
    "0xABDV": [125, 126],
    "0xABDX": [127, 128],
    "0xABDZ": [129, 130],
    "0xABFB": [131, 132],
    "0xABFD": [133, 134],
    "0xABFF": [135, 136],
    "0xABFH": [137, 138],
    "0xABFJ": [139],
    "0xABFL": [140, 141, 142, 143, 144, 145, 146, 147, 148, 149],
    "0xABFN": [150, 151, 152, 153, 154, 155, 156, 157, 158, 159],
    "0xABFP": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169],
    "0xABFR": [170, 171, 172, 173, 174, 175, 176, 177, 178, 179],
    "0xABFT": [180, 181, 182, 183, 184, 185, 186, 187, 188, 189],
    "0xABFV": [190, 191, 192, 193, 194, 195, 196, 197, 198, 199],
    "0xABFX": [200, 201, 202, 203, 204, 205, 206, 207, 208, 209],
    "0xABFZ": [210, 211, 212, 213, 214, 215, 216, 217, 218, 219],
    "0xABHB": [220, 221, 222, 223, 224, 225, 226, 227, 228, 229],
    "0xABHD": [230, 231, 232, 233, 234, 235, 236, 237, 238, 239],
    "0xABHF": [240, 241, 242, 243, 244, 245, 246, 247, 248, 249],
    "0xABHH": [250, 251, 252, 253, 254, 255, 256, 257, 258, 259],
    "0xABHJ": [260, 261, 262, 263, 264, 265, 266, 267, 268, 269],
    "0xABHL": [270, 271, 272, 273, 274, 275, 276, 277, 278, 279],
    "0xABHN": [280, 281, 282, 283, 284, 285, 286, 287, 288, 289],
    "0xABHP": [290, 291, 292, 293, 294, 295, 296, 297, 298, 299],
    "0xABHR": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309],
    "0xABHT": [310, 311, 312, 313, 314, 315, 316, 317, 318, 319],
    "0xABHV": [320, 321, 322, 323, 324, 325, 326, 327, 328, 329],
    "0xABHX": [330, 331, 332, 333, 334, 335, 336, 337, 338, 339],
    "0xABHZ": [340, 341, 342, 343, 344, 345, 346, 347, 348, 349],
    "0xABJB": [350, 351, 352, 353, 354, 355, 356, 357, 358, 359],
    "0xABJD": [360, 361, 362, 363, 364, 365, 366, 367, 368, 369],
    "0xABJF": [370, 371, 372, 373, 374, 375, 376, 377, 378, 379],
    "0xABJH": [380, 381, 382, 383, 384, 385, 386, 387, 388, 389],
    "0xABJJ": [390, 391, 392, 393, 394, 395, 396, 397, 398, 399],
    "0xABJL": [400, 401, 402, 403, 404, 405, 406, 407, 408, 409],
    "0xABJN": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419],
    "0xABJP": [420, 421, 422, 423, 424, 425, 426, 427, 428, 429],
    "0xABJR": [430, 431, 432, 433, 434, 435, 436, 437, 438, 439],
    "0xABJT": [440, 441, 442, 443, 444, 445, 446, 447, 448, 449],
    "0xABJV": [
        450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463,
        464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478,
        479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492,
        493, 494, 495, 496, 497, 498, 499,
    ],
    "0xABJX": [
        500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513,
        514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527,
        528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541,
        542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555,
        556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569,
        570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583,
        584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597,
        598, 599,
    ],
    "0xABJZ": [
        600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613,
        614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627,
        628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641,
        642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655,
        656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669,
        670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683,
        684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697,
        698, 699,
    ],
    "0xABLB": [
        700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713,
        714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727,
        728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741,
        742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755,
        756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769,
        770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783,
        784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797,
        798, 799,
    ],
    "0xABLF": [
        800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813,
        814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827,
        828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841,
        842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855,
        856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869,
        870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883,
        884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897,
        898, 899,
    ],
    "0xABLH": [
        900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913,
        914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927,
        928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941,
        942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955,
        956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969,
        970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983,
        984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997,
        998, 999,
    ],
    "0xABLJ": [1000],
};
//uint256 variables
let totalWinTokensRewarded;
let totalAddressesRewarded;
let winningTokenID;
let gameLevel = 0;
let prizeOneSlots = 40;
let prizeTwoSlots = 30;
let prizeThreeSlots = 20;
let prizeFourSlots = 10;

//uint256 []
let gameWinnersTokenIDs = [];

//address []
let gameWinnersAddresses = [];


function enterLotto() {
    console.log('REMAINING WIN SLOTS:')
    console.log('prizeOneSlots :', prizeOneSlots)
    console.log('prizeTwoSlots :', prizeTwoSlots)
    console.log('prizeThreeSlots :', prizeThreeSlots)
    console.log('prizeFourSlots :', prizeFourSlots)
      let randomNum =
        Math.floor(      
            Math.random() * (100 - 1 + 1)
        ) + 1;
  if(randomNum%10===0){
    gameLevel=4;
    prizeFourSlots--;
  } else if(randomNum%4===0){
     gameLevel=3;
     prizeThreeSlots--;
  } else if(randomNum%2===0 || randomNum%5===0){
    gameLevel=2;
    prizeTwoSlots--;
  } else {
    gameLevel=1;
    prizeOneSlots--;
  }
    return gameLevel;
}

function draw(_minTokenID, _maxTokenID) {
    let randomNum =
        Math.floor(      
            Math.random() * (_maxTokenID - _minTokenID + 1)
        ) + _minTokenID;
      winningTokenID = randomNum;
      return winningTokenID;
}
function sweepStakes( _prize, _winningTokenID) {
        gameWinnersTokenIDs.push(winningTokenID);
        for (let key in addressToTokenId) {
            if (addressToTokenId[key].includes(winningTokenID)) {
                winningTokenAddress=key;
                gameWinnersAddresses.push(key);
            }
        }
    
    console.log(
          "\n" +
        "  ***************GAME LEVEL # " +
            gameLevel + "*********" +
            "\n  \n PRIZE : " +
            _prize +
            " TOKENID WINNER : " +_winningTokenID + "\n" +
            " $LOVER TOKENS DEPOSITED INTO WINNING ADDRESS : " +
            winningTokenAddress +
            "\n " +
            gameWinnersTokenIDs.length +
            " TOTAL TOKENID WINNERS : " + gameWinnersTokenIDs +
            "\n "+
            gameWinnersAddresses.length +
            " TOTAL ADDRESSES WINNERS : " + gameWinnersAddresses +  "\n" +
             "  ************END GAME*********************** " +  "\n \n" 
    );
    totalAddressesRewarded = gameWinnersAddresses.length;
    totalWinTokensRewarded = gameWinnersTokenIDs.length;
}       

function launch(_totalTicketsSold, _totalCreatedTributes) {
    winningTokenID = draw(_totalTicketsSold, _totalCreatedTributes);
      if(_totalTicketsSold === winningTokenID){  
          gameLevel = enterLotto();
    if (gameLevel === 1) {
        sweepStakes(100, winningTokenID);
    } else if (gameLevel === 2) {
        sweepStakes(500, winningTokenID);
    } else if (gameLevel === 3) {
        sweepStakes(1000, winningTokenID);
    } else if (gameLevel === 4) {
        sweepStakes(6000, winningTokenID);
    }
    }
    else {
      console.log("Sorry You Did Not Win ")
      console.log("The Launch Drew : " + winningTokenID );
      console.log("Your TokenID : " + _totalTicketsSold );
      console.log("Try Again Next Time ")
      
    }
}
/*
let list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100];
for(i in list){
  launch(list[i], 100);
}
*/
let interval = 25;
let lel = (50 / 100) / (interval/100); 


console.log(lel)